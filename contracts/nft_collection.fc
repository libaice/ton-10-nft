#include "imports/op-codes.fc";
#include "imports/stdlib.fc";
#include "imports/params.fc";

(slice, int, cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; owner_address
        ds~load_uint(64), ;; next_item_index
        ds~load_ref(), ;; content
        ds~load_ref(), ;; nft_item_code
        ds~load_ref() ;; royalty_code
    );
}

()save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) impure inline {
    cell data = begin_cell()
        .store_slice(owner_address)
        .store_uint(next_item_index, 64)
        .store_ref(content)
        .store_ref(nft_item_code)
        .store_ref(royalty_params)
        .end_cell();
    set_data(data);
}

()send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    cell msg = begin_cell().end_cell();
    send_raw_message(msg, 64);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params); ;; begin_parse
        return ();
    }

    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == 1) {

    }
    if (op == 2) {

    }

    if (op == 3) {

    }

    throw(0xffff);
}
